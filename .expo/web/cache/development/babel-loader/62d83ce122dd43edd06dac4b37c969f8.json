{"ast":null,"code":"import Subscriptions from \"./subscriptions\";\nimport NativeInterface from \"./nativeInterface\";\nimport DeprecatedUtils from \"./deprecatedUtils\";\n\nvar _subscriptions = new Set();\n\nvar _latestState = null;\nvar _isListening = false;\n\nfunction _listenerHandler(state) {\n  var convertedState = DeprecatedUtils.convertState(state);\n  _latestState = convertedState;\n\n  _subscriptions.forEach(function (handler) {\n    return handler(convertedState);\n  });\n}\n\nexport function add(handler) {\n  _subscriptions.add(handler);\n\n  if (_latestState) {\n    handler(_latestState);\n  } else {\n    NativeInterface.getCurrentState().then(function (state) {\n      _latestState = DeprecatedUtils.convertState(state);\n      handler(_latestState);\n    });\n  }\n\n  if (_subscriptions.size > 0 && !_isListening) {\n    Subscriptions.add(_listenerHandler, false);\n    _isListening = true;\n  }\n}\nexport function remove(handler) {\n  _subscriptions.delete(handler);\n\n  if (_subscriptions.size === 0 && _isListening) {\n    Subscriptions.remove(_listenerHandler);\n    _isListening = false;\n  }\n}\nexport function clear() {\n  _subscriptions.clear();\n\n  if (_isListening) {\n    Subscriptions.remove(_listenerHandler);\n    _isListening = false;\n  }\n}\nexport default {\n  add: add,\n  remove: remove,\n  clear: clear\n};","map":{"version":3,"sources":["deprecatedSubscriptions.ts"],"names":["_subscriptions","_latestState","_isListening","convertedState","DeprecatedUtils","handler","NativeInterface","Subscriptions","add","remove","clear"],"mappings":"AASA,OAAA,aAAA;AACA,OAAA,eAAA;AAEA,OAAA,eAAA;;AAGA,IAAMA,cAAc,GAAG,IAAvB,GAAuB,EAAvB;;AACA,IAAIC,YAAgD,GAApD,IAAA;AAEA,IAAIC,YAAY,GAAhB,KAAA;;AAEA,SAAA,gBAAA,CAAA,KAAA,EAA2D;AACzD,MAAMC,cAAc,GAAGC,eAAe,CAAfA,YAAAA,CAAvB,KAAuBA,CAAvB;AACAH,EAAAA,YAAY,GAAZA,cAAAA;;AACAD,EAAAA,cAAc,CAAdA,OAAAA,CAAuB,UAAA,OAAA,EAAA;AAAA,WAAmBK,OAAO,CAA1B,cAA0B,CAA1B;AAAvBL,GAAAA;AAGF;;AAAA,OAAO,SAAA,GAAA,CAAA,OAAA,EAA2D;AAEhEA,EAAAA,cAAc,CAAdA,GAAAA,CAAAA,OAAAA;;AAGA,MAAA,YAAA,EAAkB;AAChBK,IAAAA,OAAO,CAAPA,YAAO,CAAPA;AADF,GAAA,MAEO;AACLC,IAAAA,eAAe,CAAfA,eAAAA,GAAAA,IAAAA,CACE,UAAA,KAAA,EAAiB;AACfL,MAAAA,YAAY,GAAGG,eAAe,CAAfA,YAAAA,CAAfH,KAAeG,CAAfH;AACAI,MAAAA,OAAO,CAAPA,YAAO,CAAPA;AAHJC,KAAAA;AASF;;AAAA,MAAIN,cAAc,CAAdA,IAAAA,GAAAA,CAAAA,IAA2B,CAA/B,YAAA,EAA8C;AAC5CO,IAAAA,aAAa,CAAbA,GAAAA,CAAAA,gBAAAA,EAAAA,KAAAA;AACAL,IAAAA,YAAY,GAAZA,IAAAA;AAEH;AAED;AAAA,OAAO,SAAA,MAAA,CAAA,OAAA,EAA8D;AACnEF,EAAAA,cAAc,CAAdA,MAAAA,CAAAA,OAAAA;;AAEA,MAAIA,cAAc,CAAdA,IAAAA,KAAAA,CAAAA,IAAJ,YAAA,EAA+C;AAC7CO,IAAAA,aAAa,CAAbA,MAAAA,CAAAA,gBAAAA;AACAL,IAAAA,YAAY,GAAZA,KAAAA;AAEH;AAED;AAAA,OAAO,SAAA,KAAA,GAAuB;AAC5BF,EAAAA,cAAc,CAAdA,KAAAA;;AAEA,MAAA,YAAA,EAAkB;AAChBO,IAAAA,aAAa,CAAbA,MAAAA,CAAAA,gBAAAA;AACAL,IAAAA,YAAY,GAAZA,KAAAA;AAEH;AAED;AAAA,eAAe;AACbM,EAAAA,GAAG,EADU,GAAA;AAEbC,EAAAA,MAAM,EAFO,MAAA;AAGbC,EAAAA,KAAK,EAHP;AAAe,CAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport Subscriptions from './subscriptions';\nimport NativeInterface from './nativeInterface';\nimport * as DeprecatedTypes from './deprecatedTypes';\nimport DeprecatedUtils from './deprecatedUtils';\nimport * as Types from './types';\n\nconst _subscriptions = new Set<DeprecatedTypes.ChangeHandler>();\nlet _latestState: DeprecatedTypes.NetInfoData | null = null;\n\nlet _isListening = false;\n\nfunction _listenerHandler(state: Types.NetInfoState): void {\n  const convertedState = DeprecatedUtils.convertState(state);\n  _latestState = convertedState;\n  _subscriptions.forEach((handler): void => handler(convertedState));\n}\n\nexport function add(handler: DeprecatedTypes.ChangeHandler): void {\n  // Add the subscription handler to our set\n  _subscriptions.add(handler);\n\n  // Send it the latest data we have\n  if (_latestState) {\n    handler(_latestState);\n  } else {\n    NativeInterface.getCurrentState().then(\n      (state): void => {\n        _latestState = DeprecatedUtils.convertState(state);\n        handler(_latestState);\n      },\n    );\n  }\n\n  // Subscribe to native events, if we aren't already\n  if (_subscriptions.size > 0 && !_isListening) {\n    Subscriptions.add(_listenerHandler, false);\n    _isListening = true;\n  }\n}\n\nexport function remove(handler: DeprecatedTypes.ChangeHandler): void {\n  _subscriptions.delete(handler);\n\n  if (_subscriptions.size === 0 && _isListening) {\n    Subscriptions.remove(_listenerHandler);\n    _isListening = false;\n  }\n}\n\nexport function clear(): void {\n  _subscriptions.clear();\n\n  if (_isListening) {\n    Subscriptions.remove(_listenerHandler);\n    _isListening = false;\n  }\n}\n\nexport default {\n  add,\n  remove,\n  clear,\n};\n"]},"metadata":{},"sourceType":"module"}