{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nvar _jsxFileName = \"/Users/kharl/pawSpace/node_modules/react-native-masonry/components/Masonry.js\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ListView from \"react-native-web/dist/exports/ListView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Task from 'data.task';\nimport isEqual from 'lodash.isequal';\nimport differenceBy from 'lodash.differenceby';\nimport { resolveImage } from \"./model\";\nimport Column from \"./Column\";\nimport styles from \"../styles/main\";\nexport var assignObjectColumn = function assignObjectColumn(nColumns, index, targetObject) {\n  return _objectSpread({}, targetObject, {\n    column: index % nColumns\n  });\n};\nexport var assignObjectIndex = function assignObjectIndex(index, targetObject) {\n  return _objectSpread({}, targetObject, {\n    index: index\n  });\n};\nexport var findMinIndex = function findMinIndex(srcArray) {\n  return srcArray.reduce(function (shortest, cValue, cIndex, cArray) {\n    return cValue < cArray[shortest] ? cIndex : shortest;\n  }, 0);\n};\nexport var containMatchingUris = function containMatchingUris(r1, r2) {\n  return isEqual(r1.map(function (brick) {\n    return brick.uri;\n  }), r2.map(function (brick) {\n    return brick.uri;\n  }));\n};\nexport var generateColumnHeights = function generateColumnHeights(count) {\n  return Array(count).fill(0);\n};\nvar INVALID_COLUMN_WIDTH = -1;\nvar PRIORITY_BALANCE = \"balance\";\nvar PRIORITY_ORDER = \"order\";\n\nvar Masonry = function (_Component) {\n  _inherits(Masonry, _Component);\n\n  function Masonry(props) {\n    var _this;\n\n    _classCallCheck(this, Masonry);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Masonry).call(this, props));\n\n    _this._insertIntoColumn = function (resolvedBrick, dataSet, _columnHeights, columnWidth) {\n      var dataCopy = dataSet.slice();\n      var priority = _this.props.priority;\n      var columnIndex;\n\n      switch (priority) {\n        case PRIORITY_BALANCE:\n          columnIndex = findMinIndex(_columnHeights);\n\n          var heightsCopy = _columnHeights.slice();\n\n          var newColumnHeights = heightsCopy[columnIndex] + columnWidth * resolvedBrick.dimensions.height / resolvedBrick.dimensions.width;\n          heightsCopy[columnIndex] = newColumnHeights;\n\n          _this.setState({\n            _columnHeights: heightsCopy\n          });\n\n          break;\n\n        case PRIORITY_ORDER:\n        default:\n          columnIndex = resolvedBrick.column;\n          break;\n      }\n\n      var column = dataSet[columnIndex];\n      var sorted = _this.props.sorted;\n\n      if (column) {\n        var bricks = [].concat(_toConsumableArray(column), [resolvedBrick]);\n\n        if (sorted) {\n          bricks = bricks.sort(function (a, b) {\n            return a.index < b.index ? -1 : 1;\n          });\n        }\n\n        dataCopy[columnIndex] = bricks;\n      } else {\n        dataCopy = [].concat(_toConsumableArray(dataCopy), [[resolvedBrick]]);\n      }\n\n      return dataCopy;\n    };\n\n    _this._delayCallEndReach = function () {\n      var sortedData = _this.state._sortedData;\n      var sortedLength = sortedData.reduce(function (acc, cv) {\n        return cv.length + acc;\n      }, 0);\n\n      if (sortedLength === _this.state._uniqueCount) {\n        _this.props.onEndReached();\n      }\n    };\n\n    _this.ds = new ListView.DataSource({\n      rowHasChanged: function rowHasChanged(r1, r2) {\n        return !containMatchingUris(r1, r2);\n      }\n    });\n    var columnHeights = generateColumnHeights(props.columns);\n    _this.state = {\n      dataSource: _this.ds.cloneWithRows([]),\n      dimensions: {},\n      initialOrientation: true,\n      _sortedData: [],\n      _resolvedData: [],\n      _columnHeights: columnHeights,\n      _uniqueCount: props.bricks.length\n    };\n    Dimensions.addEventListener('change', function (window) {\n      return _this.setState(function (state) {\n        return {\n          initialOrientation: !state.initialOrientation\n        };\n      });\n    });\n    return _this;\n  }\n\n  _createClass(Masonry, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.isBalancingEnabled()) {\n        this.resolveBricks(this.props);\n      }\n    }\n  }, {\n    key: \"isBalancingEnabled\",\n    value: function isBalancingEnabled() {\n      var priority = this.props.priority;\n      return priority == PRIORITY_BALANCE;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var differentColumns = this.props.columns !== nextProps.columns;\n      var differentPriority = this.props.priority !== nextProps.priority;\n      var brickDiff = differenceBy(nextProps.bricks, this.props.bricks, 'uri');\n      var appendedData = brickDiff.length !== nextProps.bricks.length;\n\n      var _uniqueCount = brickDiff.length + this.props.bricks.length;\n\n      if (differentColumns || differentPriority || !appendedData) {\n        this.setState(function (state) {\n          return {\n            _sortedData: [],\n            _resolvedData: [],\n            _columnHeights: generateColumnHeights(nextProps.columns),\n            _uniqueCount: _uniqueCount\n          };\n        }, this.resolveBricks(nextProps));\n      }\n\n      if (appendedData) {\n        var offSet = this.props.bricks.length;\n        this.setState({\n          _uniqueCount: _uniqueCount\n        }, this.resolveBricks(_objectSpread({}, nextProps, {\n          bricks: brickDiff\n        }), offSet));\n      }\n    }\n  }, {\n    key: \"getColumnWidth\",\n    value: function getColumnWidth(width, spacing, columns) {\n      var gutterBase = width / 100;\n      var gutterSize = gutterBase * spacing;\n      return width / columns - gutterSize / 2;\n    }\n  }, {\n    key: \"resolveBricks\",\n    value: function resolveBricks(_ref) {\n      var _this2 = this;\n\n      var bricks = _ref.bricks,\n          columns = _ref.columns,\n          spacing = _ref.spacing,\n          priority = _ref.priority;\n      var offSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (bricks.length === 0) {\n        this.setState(function (state) {\n          return {\n            dataSource: state.dataSource.cloneWithRows([])\n          };\n        });\n      }\n\n      var columnWidth = INVALID_COLUMN_WIDTH;\n\n      if (this.isBalancingEnabled()) {\n        var width = this.state.dimensions.width;\n        columnWidth = this.getColumnWidth(width, spacing, columns);\n      }\n\n      bricks.map(function (brick, index) {\n        return assignObjectColumn(columns, index, brick);\n      }).map(function (brick, index) {\n        return assignObjectIndex(offSet + index, brick);\n      }).map(function (brick) {\n        return resolveImage(brick);\n      }).map(function (resolveTask) {\n        return resolveTask.fork(function (err) {\n          return console.warn('Image failed to load');\n        }, function (resolvedBrick) {\n          _this2.setState(function (state) {\n            var sortedData = _this2._insertIntoColumn(resolvedBrick, state._sortedData, state._columnHeights, columnWidth);\n\n            return {\n              dataSource: state.dataSource.cloneWithRows(sortedData),\n              _sortedData: sortedData,\n              _resolvedData: [].concat(_toConsumableArray(state._resolvedData), [resolvedBrick])\n            };\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_setParentDimensions\",\n    value: function _setParentDimensions(event) {\n      var _this3 = this;\n\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          width = _event$nativeEvent$la.width,\n          height = _event$nativeEvent$la.height;\n      this.setState({\n        dimensions: {\n          width: width,\n          height: height\n        }\n      }, function () {\n        if (_this3.isBalancingEnabled()) {\n          _this3.resolveBricks(_this3.props);\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        onLayout: function onLayout(event) {\n          return _this4._setParentDimensions(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        }\n      }, React.createElement(ListView, {\n        contentContainerStyle: styles.masonry__container,\n        dataSource: this.state.dataSource,\n        enableEmptySections: true,\n        scrollRenderAheadDistance: 100,\n        removeClippedSubviews: false,\n        onEndReached: this._delayCallEndReach,\n        onEndReachedThreshold: this.props.onEndReachedThreshold,\n        renderRow: function renderRow(data, sectionId, rowID) {\n          return React.createElement(Column, {\n            data: data,\n            columns: _this4.props.columns,\n            parentDimensions: _this4.state.dimensions,\n            imageContainerStyle: _this4.props.imageContainerStyle,\n            customImageComponent: _this4.props.customImageComponent,\n            customImageProps: _this4.props.customImageProps,\n            spacing: _this4.props.spacing,\n            key: \"RN-MASONRY-COLUMN-\" + rowID,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 241\n            }\n          });\n        },\n        refreshControl: this.props.refreshControl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        }\n      }));\n    }\n  }]);\n\n  return Masonry;\n}(Component);\n\nMasonry.propTypes = {\n  bricks: PropTypes.array,\n  columns: PropTypes.number,\n  sorted: PropTypes.bool,\n  imageContainerStyle: PropTypes.object,\n  customImageComponent: PropTypes.func,\n  customImageProps: PropTypes.object,\n  spacing: PropTypes.number,\n  priority: PropTypes.string,\n  refreshControl: PropTypes.element,\n  onEndReached: PropTypes.func,\n  onEndReachedThreshold: PropTypes.number\n};\nMasonry.defaultProps = {\n  bricks: [],\n  columns: 2,\n  sorted: false,\n  imageContainerStyle: {},\n  spacing: 1,\n  priority: 'order',\n  onEndReached: function onEndReached() {\n    return {};\n  },\n  onEndReachedThreshold: 25\n};\nexport { Masonry as default };\n;","map":{"version":3,"sources":["/Users/kharl/pawSpace/node_modules/react-native-masonry/components/Masonry.js"],"names":["React","Component","PropTypes","Task","isEqual","differenceBy","resolveImage","Column","styles","assignObjectColumn","nColumns","index","targetObject","column","assignObjectIndex","findMinIndex","srcArray","reduce","shortest","cValue","cIndex","cArray","containMatchingUris","r1","r2","map","brick","uri","generateColumnHeights","count","Array","fill","INVALID_COLUMN_WIDTH","PRIORITY_BALANCE","PRIORITY_ORDER","Masonry","props","_insertIntoColumn","resolvedBrick","dataSet","_columnHeights","columnWidth","dataCopy","slice","priority","columnIndex","heightsCopy","newColumnHeights","dimensions","height","width","setState","sorted","bricks","sort","a","b","_delayCallEndReach","sortedData","state","_sortedData","sortedLength","acc","cv","length","_uniqueCount","onEndReached","ds","ListView","DataSource","rowHasChanged","columnHeights","columns","dataSource","cloneWithRows","initialOrientation","_resolvedData","Dimensions","addEventListener","window","isBalancingEnabled","resolveBricks","nextProps","differentColumns","differentPriority","brickDiff","appendedData","offSet","spacing","gutterBase","gutterSize","getColumnWidth","resolveTask","fork","err","console","warn","event","nativeEvent","layout","flex","_setParentDimensions","masonry__container","onEndReachedThreshold","data","sectionId","rowID","imageContainerStyle","customImageComponent","customImageProps","refreshControl","propTypes","array","number","bool","object","func","string","element","defaultProps"],"mappings":"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","sourcesContent":["import { View, ListView, Image, Text, Dimensions } from 'react-native';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Task from 'data.task';\nimport isEqual from 'lodash.isequal';\nimport differenceBy from 'lodash.differenceby';\n\nimport { resolveImage } from './model';\nimport Column from './Column';\nimport styles from '../styles/main';\n\n// assignObjectColumn :: Number -> [Objects] -> [Objects]\nexport const assignObjectColumn = (nColumns, index, targetObject) => ({...targetObject, ...{ column: index % nColumns }});\n\n// Assigns an `index` property` from bricks={data}` for later sorting.\n// assignObjectIndex :: (Number, Object) -> Object\nexport const assignObjectIndex = (index, targetObject) => ({...targetObject, ...{ index }});\n\n// findMinIndex :: [Numbers] -> Number\nexport const findMinIndex = (srcArray) => srcArray.reduce((shortest, cValue, cIndex, cArray) => (cValue < cArray[shortest]) ? cIndex : shortest, 0);\n\n// containMatchingUris :: ([brick], [brick]) -> Bool\nexport const containMatchingUris = (r1, r2) => isEqual(r1.map(brick => brick.uri), r2.map(brick => brick.uri));\n\n// Fills an array with 0's based on number count\n// generateColumnsHeight :: Number -> Array [...0]\nexport const generateColumnHeights = count => Array(count).fill(0);\n\nconst INVALID_COLUMN_WIDTH = -1;\nconst PRIORITY_BALANCE = \"balance\";\nconst PRIORITY_ORDER = \"order\";\n\nexport default class Masonry extends Component {\n\tstatic propTypes = {\n\t\tbricks: PropTypes.array,\n\t\tcolumns: PropTypes.number,\n\t\tsorted: PropTypes.bool,\n\t\timageContainerStyle: PropTypes.object,\n\t\tcustomImageComponent: PropTypes.func,\n\t\tcustomImageProps: PropTypes.object,\n\t\tspacing: PropTypes.number,\n\t\tpriority: PropTypes.string,\n\t\trefreshControl: PropTypes.element,\n\t\tonEndReached: PropTypes.func,\n\t\tonEndReachedThreshold: PropTypes.number\n\t};\n\n\tstatic defaultProps = {\n\t\tbricks: [],\n\t\tcolumns: 2,\n\t\tsorted: false,\n\t\timageContainerStyle: {},\n\t\tspacing: 1,\n\t\tpriority: 'order',\n\t\t// no-op function\n\t\tonEndReached: () => ({}),\n\t\tonEndReachedThreshold: 25\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// Assuming users don't want duplicated images, if this is not the case we can always change the diff check\n\t\tthis.ds = new ListView.DataSource({ rowHasChanged: (r1, r2) => !containMatchingUris(r1, r2) });\n\t\t// This creates an array of [1..n] with values of 0, each index represent a column within the masonry\n\t\tconst columnHeights = generateColumnHeights(props.columns);\n\t\tthis.state = {\n\t\t\tdataSource: this.ds.cloneWithRows([]),\n\t\t\tdimensions: {},\n\t\t\tinitialOrientation: true,\n\t\t\t_sortedData: [],\n\t\t\t_resolvedData: [],\n\t\t\t_columnHeights: columnHeights,\n\t\t\t_uniqueCount: props.bricks.length\n\t\t};\n\t\t// Assuming that rotation is binary (vertical|landscape)\n\t\tDimensions.addEventListener('change', (window) => this.setState(state => ({ initialOrientation: !state.initialOrientation })));\n\t}\n\n\tcomponentDidMount() {\n\t\t// If balance priority isn't enabled, resolve bricks on didMount\n\t\tif (!this.isBalancingEnabled()) {\n\t\t\tthis.resolveBricks(this.props);\n\t\t}\n\t}\n\n\tisBalancingEnabled() {\n\t\tconst { priority } = this.props;\n\t\treturn priority == PRIORITY_BALANCE;\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tconst differentColumns = this.props.columns !== nextProps.columns;\n\t\tconst differentPriority = this.props.priority !== nextProps.priority;\n\t\t// We use the difference in the passed in bricks to determine if user is appending or not\n\t\tconst brickDiff = differenceBy(nextProps.bricks, this.props.bricks, 'uri');\n\t\tconst appendedData = brickDiff.length !== nextProps.bricks.length;\n\t\tconst _uniqueCount = brickDiff.length + this.props.bricks.length;\n\n\t\t// These intents would entail a complete re-render of the listview\n\t\tif (differentColumns || differentPriority || !appendedData) {\n\t\t\tthis.setState(state => ({\n\t\t\t\t_sortedData: [],\n\t\t\t\t_resolvedData: [],\n\t\t\t\t_columnHeights: generateColumnHeights(nextProps.columns),\n\t\t\t\t_uniqueCount\n\t\t\t}), this.resolveBricks(nextProps));\n\t\t}\n\n\t\t// We use the existing data and only resolve what is needed\n\t\tif (appendedData) {\n\t\t\tconst offSet = this.props.bricks.length;\n\t\t\tthis.setState({\n\t\t\t\t_uniqueCount\n\t\t\t}, this.resolveBricks({...nextProps, bricks: brickDiff}, offSet));\n\t\t}\n\t}\n\n\tgetColumnWidth(width, spacing, columns) {\n\t\tconst gutterBase = width / 100;\n\t\tconst gutterSize = gutterBase * spacing;\n\t\treturn (width / columns) - (gutterSize / 2);\n\t}\n\n\tresolveBricks({ bricks, columns, spacing, priority }, offSet = 0) {\n\t\tif (bricks.length === 0) {\n\t\t\t// clear and re-render\n\t\t\tthis.setState(state => ({\n\t\t\t\tdataSource: state.dataSource.cloneWithRows([])\n\t\t\t}));\n\t\t}\n\n\t\t// Calculate column width in case balance priority\n\t\tlet columnWidth = INVALID_COLUMN_WIDTH;\n\t\tif (this.isBalancingEnabled()) {\n\t\t\tconst { dimensions: { width } } = this.state;\n\t\t\tcolumnWidth = this.getColumnWidth(width, spacing, columns);\n\t\t}\n\n\t\t// Sort bricks and place them into their respectable columns\n\t\t// Issues arrise if state changes occur in the midst of a resolve\n\t\tbricks\n\t\t\t.map((brick, index) => assignObjectColumn(columns, index, brick))\n\t\t\t.map((brick, index) => assignObjectIndex(offSet + index, brick))\n\t\t\t.map(brick => resolveImage(brick))\n\t\t\t.map(resolveTask => resolveTask.fork(\n\t\t\t\t(err) => console.warn('Image failed to load'),\n\t\t\t\t(resolvedBrick) => {\n\t\t\t\t\tthis.setState(state => {\n\t\t\t\t\t\tconst sortedData = this._insertIntoColumn(resolvedBrick, state._sortedData, state._columnHeights, columnWidth);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdataSource: state.dataSource.cloneWithRows(sortedData),\n\t\t\t\t\t\t\t_sortedData: sortedData,\n\t\t\t\t\t\t\t_resolvedData: [...state._resolvedData, resolvedBrick]\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}));\n\t}\n\n\t_setParentDimensions(event) {\n\t\t// Currently height isn't being utilized, but will pass through for future features\n\t\tconst {width, height} = event.nativeEvent.layout;\n\n\t\tthis.setState({\n\t\t\tdimensions: {\n\t\t\t\twidth,\n\t\t\t\theight\n\t\t\t}\n\t\t}, () => {\n\t\t\t// If balance priority is enabled, resolve bricks after onLayout\n\t\t\tif (this.isBalancingEnabled()) {\n\t\t\t\tthis.resolveBricks(this.props);\n\t\t\t}\n\t\t});\n\t}\n\n\t// Use columnHeights from state object provided by setState\n\t_insertIntoColumn = (resolvedBrick, dataSet, _columnHeights, columnWidth) => {\n\t\tlet dataCopy = dataSet.slice();\n\t\tconst priority = this.props.priority;\n\t\tlet columnIndex;\n\n\t\tswitch (priority) {\n\t\tcase PRIORITY_BALANCE:\n\t\t\t// Column width only valid in case priority is balance\n\t\t\t// Best effort to balance but sometimes state changes may have delays when performing calculation\n\t\t\tcolumnIndex = findMinIndex(_columnHeights);\n\t\t\tconst heightsCopy = _columnHeights.slice();\n\t\t\tconst newColumnHeights = heightsCopy[columnIndex] + (columnWidth * resolvedBrick.dimensions.height / resolvedBrick.dimensions.width);\n\t\t\theightsCopy[columnIndex] = newColumnHeights;\n\t\t\tthis.setState({\n\t\t\t\t_columnHeights: heightsCopy\n\t\t\t});\n\t\t\tbreak;\n\t\tcase PRIORITY_ORDER:\n\t\tdefault:\n\t\t\tcolumnIndex = resolvedBrick.column;\n\t\t\tbreak;\n\t\t}\n\n\t\tconst column = dataSet[columnIndex];\n\t\tconst sorted = this.props.sorted;\n\n\t\tif (column) {\n\t\t\t// Append to existing \"row\"/\"column\"\n\t\t\tlet bricks = [...column, resolvedBrick];\n\t\t\tif (sorted) {\n\t\t\t\t// Sort bricks according to the index of their original array position\n\t\t\t\tbricks = bricks.sort((a, b) => (a.index < b.index) ? -1 : 1);\n\t\t\t}\n\t\t\tdataCopy[columnIndex] = bricks;\n\t\t} else {\n\t\t\t// Pass it as a new \"row\" for the data source\n\t\t\tdataCopy = [...dataCopy, [resolvedBrick]];\n\t\t}\n\n\t\treturn dataCopy;\n\t};\n\n  _delayCallEndReach = () => {\n\t\tconst sortedData = this.state._sortedData;\n\t\tconst sortedLength = sortedData.reduce((acc, cv) => cv.length + acc, 0);\n\t\t// Limit the invokes to only when the masonry has\n\t\t// fully loaded all of the content to ensure user fully reaches the end\n\t\tif (sortedLength === this.state._uniqueCount) {\n\t\t\tthis.props.onEndReached();\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t<View style={{flex: 1}} onLayout={(event) => this._setParentDimensions(event)}>\n\t\t<ListView\n\t\t\tcontentContainerStyle={styles.masonry__container}\n\t\t\tdataSource={this.state.dataSource}\n\t\t\tenableEmptySections\n\t\t\tscrollRenderAheadDistance={100}\n\t\t\tremoveClippedSubviews={false}\n\t\t\tonEndReached={this._delayCallEndReach}\n\t\t\tonEndReachedThreshold={this.props.onEndReachedThreshold}\n\t\t\trenderRow={(data, sectionId, rowID) => (\n\t\t\t<Column\n\t\t\t\tdata={data}\n\t\t\t\tcolumns={this.props.columns}\n\t\t\t\tparentDimensions={this.state.dimensions}\n\t\t\t\timageContainerStyle={this.props.imageContainerStyle}\n\t\t\t\tcustomImageComponent={this.props.customImageComponent}\n\t\t\t\tcustomImageProps={this.props.customImageProps}\n\t\t\t\tspacing={this.props.spacing}\n\t\t\t\tkey={`RN-MASONRY-COLUMN-${rowID}`} />\n\t\t\t)}\n\t\t\trefreshControl={this.props.refreshControl} />\n\t\t</View>\n\t\t);\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}