{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/kharl/pawSpace/node_modules/react-native-masonry/components/Column.js\";\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport styles from \"../styles/main\";\nimport PropTypes from 'prop-types';\nimport Brick from \"./Brick\";\n\nvar Column = function (_Component) {\n  _inherits(Column, _Component);\n\n  function Column(_props) {\n    var _this;\n\n    _classCallCheck(this, Column);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Column).call(this, _props));\n\n    _this._renderBrick = function (data) {\n      var brick = data.item;\n      var gutter = data.index === 0 ? 0 : brick.gutter;\n      var key = \"RN-MASONRY-BRICK-\" + brick.column + \"-\" + data.index;\n      var _this$props = _this.props,\n          imageContainerStyle = _this$props.imageContainerStyle,\n          customImageComponent = _this$props.customImageComponent,\n          customImageProps = _this$props.customImageProps;\n\n      var props = _objectSpread({}, brick, {\n        gutter: gutter,\n        key: key,\n        imageContainerStyle: imageContainerStyle,\n        customImageComponent: customImageComponent,\n        customImageProps: customImageProps\n      });\n\n      return React.createElement(Brick, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        }\n      }));\n    };\n\n    _this._keyExtractor = function (item) {\n      return \"IMAGE-KEY-\" + item.uri + \"---\" + (item.key ? item.key : \"0\");\n    };\n\n    _this.state = {\n      images: [],\n      columnWidth: 0\n    };\n    return _this;\n  }\n\n  _createClass(Column, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        images: this._resizeImages(this.props.data, this.props.parentDimensions, this.props.columns)\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        images: this._resizeImages(nextProps.data, nextProps.parentDimensions, nextProps.columns)\n      });\n    }\n  }, {\n    key: \"_resizeImages\",\n    value: function _resizeImages(data, parentDimensions, nColumns) {\n      var _this2 = this;\n\n      return Object.keys(data).map(function (key) {\n        var image = data[key];\n\n        var imageSizedForColumn = _this2._resizeByColumns(data[key].dimensions, parentDimensions, nColumns);\n\n        return _objectSpread({}, image, imageSizedForColumn);\n      });\n    }\n  }, {\n    key: \"_resizeByColumns\",\n    value: function _resizeByColumns() {\n      var imgDimensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        width: 0,\n        height: 0\n      };\n      var parentDimensions = arguments.length > 1 ? arguments[1] : undefined;\n      var nColumns = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n      var height = parentDimensions.height,\n          width = parentDimensions.width;\n      var gutterBase = width / 100;\n      var gutterSize = gutterBase * this.props.spacing;\n      var columnWidth = width / nColumns - gutterSize / 2;\n\n      if (this.state.columnWidth !== columnWidth) {\n        this.setState({\n          columnWidth: columnWidth\n        });\n      }\n\n      var divider = imgDimensions.width / columnWidth;\n      var newWidth = imgDimensions.width / divider;\n      var newHeight = imgDimensions.height / divider;\n      return {\n        width: newWidth,\n        height: newHeight,\n        gutter: gutterSize\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: [{\n          width: this.state.columnWidth,\n          overflow: 'hidden'\n        }, styles.masonry__column],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        }\n      }, React.createElement(FlatList, {\n        key: this.props.columnKey,\n        data: this.state.images,\n        keyExtractor: this._keyExtractor,\n        renderItem: this._renderBrick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        }\n      }));\n    }\n  }]);\n\n  return Column;\n}(Component);\n\nColumn.propTypes = {\n  data: PropTypes.array,\n  columns: PropTypes.number,\n  parentDimensions: PropTypes.object,\n  columnKey: PropTypes.string,\n  imageContainerStyle: PropTypes.object,\n  customImageComponent: PropTypes.func,\n  customImageProps: PropTypes.object\n};\nColumn.defaultProps = {\n  imageContainerStyle: {},\n  spacing: 1\n};\nexport { Column as default };","map":{"version":3,"sources":["/Users/kharl/pawSpace/node_modules/react-native-masonry/components/Column.js"],"names":["React","Component","styles","PropTypes","Brick","Column","props","_renderBrick","data","brick","item","gutter","index","key","column","imageContainerStyle","customImageComponent","customImageProps","_keyExtractor","uri","state","images","columnWidth","setState","_resizeImages","parentDimensions","columns","nextProps","nColumns","Object","keys","map","image","imageSizedForColumn","_resizeByColumns","dimensions","imgDimensions","width","height","gutterBase","gutterSize","spacing","divider","newWidth","newHeight","overflow","masonry__column","columnKey","propTypes","array","number","object","string","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { View, Image, TouchableHighlight, FlatList } from 'react-native';\nimport styles from '../styles/main';\nimport PropTypes from 'prop-types';\nimport Brick from './Brick';\n\n// Takes props and returns a masonry column\nexport default class Column extends Component {\n\tstatic propTypes = {\n\t\tdata: PropTypes.array,\n\t\tcolumns: PropTypes.number,\n\t\tparentDimensions: PropTypes.object,\n\t\tcolumnKey: PropTypes.string,\n\t\timageContainerStyle: PropTypes.object,\n\t\tcustomImageComponent: PropTypes.func,\n\t\tcustomImageProps: PropTypes.object\n\t};\n\n\tstatic defaultProps = {\n\t\timageContainerStyle: {},\n\t\tspacing: 1\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\timages: [],\n\t\t\tcolumnWidth: 0\n\t\t};\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.setState({\n\t\t\timages: this._resizeImages(this.props.data, this.props.parentDimensions, this.props.columns)\n\t\t});\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tthis.setState({\n\t\t\timages: this._resizeImages(nextProps.data, nextProps.parentDimensions, nextProps.columns)\n\t\t});\n\t}\n\n\t// Transforms an array of images with dimensions scaled according to the\n\t// column it is within\n\t// _resizeImages :: Data, parentDimensions. nColumns -> ResizedImage\n\t_resizeImages (data, parentDimensions, nColumns) {\n\t\treturn Object.keys(data).map((key) => {\n\t\t\tconst image = data[key];\n\t\t\tconst imageSizedForColumn =\n\t\t\t\t  this._resizeByColumns(data[key].dimensions, parentDimensions, nColumns);\n\t\t\t// Return a image object that width will be equivilent to\n\t\t\t// the column dimension, while retaining original image properties\n\t\t\treturn {\n  \t\t\t\t...image,\n  \t\t\t\t...imageSizedForColumn\n\t\t\t};\n\t\t});\n\t}\n\n\t// Resize image while maintain aspect ratio\n\t// _resizeByColumns :: ImgDimensions , parentDimensions, nColumns  -> AdjustedDimensions\n\t_resizeByColumns (imgDimensions = { width: 0, height: 0 }, parentDimensions, nColumns=2) {\n\t\tconst { height, width } = parentDimensions;\n\n\t\t// The gutter is 1% of the available view width\n\t\tconst gutterBase = width / 100;\n\t\tconst gutterSize = gutterBase * this.props.spacing;\n\n\t\t// Column gutters are shared between right and left image\n\t\tconst columnWidth = (width / nColumns) - (gutterSize / 2);\n\n\t\tif (this.state.columnWidth !== columnWidth) {\n\t\t\tthis.setState({\n\t\t\t\tcolumnWidth\n\t\t\t});\n\t\t}\n\n\t\tconst divider = imgDimensions.width / columnWidth;\n\n\t\tconst newWidth = imgDimensions.width / divider;\n\t\tconst newHeight = imgDimensions.height / divider;\n\n\t\treturn { width: newWidth, height: newHeight, gutter: gutterSize };\n\t}\n\n\t// Renders the \"bricks\" within the columns\n\t// _renderBrick :: images -> [TouchableTag || ImageTag...]\n\t_renderBrick = (data) => {\n\t\t// Example Data Structure\n\t\t// {\n\t\t//   \"item\": {\n\t\t//     \"uri\": \"https://img.buzzfeed.com/buzzfeed-static/static/2016-01/14/20/campaign_images/webdr15/which-delicious-mexican-food-item-are-you-based-o-2-20324-1452822970-1_dblbig.jpg\",\n\t\t//     \"column\": 0,\n\t\t//     \"dimensions\": {\n\t\t//       \"width\": 625,\n\t\t//       \"height\": 415\n\t\t//     },\n\t\t//     \"width\": 180.675,\n\t\t//     \"height\": 119.96820000000001,\n\t\t//     \"gutter\": 3.65\n\t\t//   },\n\t\t//   \"index\": 9\n\t\t// }\n\t\tconst brick = data.item;\n\t\tconst gutter = (data.index === 0) ? 0 : brick.gutter;\n\t\tconst key = `RN-MASONRY-BRICK-${brick.column}-${data.index}`;\n\t\tconst { imageContainerStyle, customImageComponent, customImageProps } = this.props;\n\t\tconst props = { ...brick, gutter, key, imageContainerStyle, customImageComponent, customImageProps };\n\n\t\treturn (\n\t\t\t<Brick\n\t\t\t  {...props} />\n\t\t);\n\t}\n\n\t// _keyExtractor :: item -> id\n\t_keyExtractor = (item) => (\"IMAGE-KEY-\" + item.uri + \"---\" + (item.key ? item.key : \"0\"));\n\n\trender() {\n\t\treturn (\n\t\t\t<View\n\t\t\t  style={[\n\t\t\t\t  {\n\t\t\t\t\t  width: this.state.columnWidth,\n\t\t\t\t\t  overflow: 'hidden'\n\t\t\t\t  },\n\t\t\t\t  styles.masonry__column\n\t\t\t  ]}>\n\t\t\t  <FlatList\n\t\t\t\tkey={this.props.columnKey}\n\t\t\t\tdata={this.state.images}\n\t\t\t\tkeyExtractor={this._keyExtractor}\n\t\t\t\trenderItem={this._renderBrick}\n\t\t\t\t/>\n\t\t\t</View>\n\t\t)\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}