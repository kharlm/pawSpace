{"ast":null,"code":"import NativeInterface from \"./nativeInterface\";\nvar DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';\n\nvar _subscriptions = new Set();\n\nvar _latestState = null;\nvar _nativeEventSubscription = null;\n\nfunction _listenerHandler(state) {\n  _latestState = state;\n\n  _subscriptions.forEach(function (handler) {\n    return handler(state);\n  });\n}\n\nexport function add(handler) {\n  var latestOnListen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  _subscriptions.add(handler);\n\n  if (latestOnListen) {\n    if (_latestState) {\n      handler(_latestState);\n    } else {\n      NativeInterface.getCurrentState().then(function (state) {\n        _latestState = state;\n        handler(_latestState);\n      });\n    }\n  }\n\n  if (_subscriptions.size > 0 && !_nativeEventSubscription) {\n    _nativeEventSubscription = NativeInterface.eventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, _listenerHandler);\n  }\n}\nexport function remove(handler) {\n  _subscriptions.delete(handler);\n\n  if (_subscriptions.size === 0 && _nativeEventSubscription) {\n    _nativeEventSubscription.remove();\n\n    _nativeEventSubscription = null;\n  }\n}\nexport function clear() {\n  _subscriptions.clear();\n\n  if (_nativeEventSubscription) {\n    _nativeEventSubscription.remove();\n\n    _nativeEventSubscription = null;\n  }\n}\nexport default {\n  add: add,\n  remove: remove,\n  clear: clear\n};","map":{"version":3,"sources":["subscriptions.ts"],"names":["DEVICE_CONNECTIVITY_EVENT","_subscriptions","_latestState","_nativeEventSubscription","handler","latestOnListen","NativeInterface","add","remove","clear"],"mappings":"AAUA,OAAA,eAAA;AAGA,IAAMA,yBAAyB,GAA/B,gCAAA;;AAEA,IAAMC,cAAc,GAAG,IAAvB,GAAuB,EAAvB;;AACA,IAAIC,YAAuC,GAA3C,IAAA;AAEA,IAAIC,wBAAwD,GAA5D,IAAA;;AAEA,SAAA,gBAAA,CAAA,KAAA,EAA2D;AACzDD,EAAAA,YAAY,GAAZA,KAAAA;;AACAD,EAAAA,cAAc,CAAdA,OAAAA,CAAuB,UAAA,OAAA,EAAA;AAAA,WAAmBG,OAAO,CAA1B,KAA0B,CAA1B;AAAvBH,GAAAA;AAGF;;AAAA,OAAO,SAAA,GAAA,CAAA,OAAA,EAGC;AADNI,MAAAA,cACM,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADoB,IAA1BA;;AAGAJ,EAAAA,cAAc,CAAdA,GAAAA,CAAAA,OAAAA;;AAGA,MAAA,cAAA,EAAoB;AAClB,QAAA,YAAA,EAAkB;AAChBG,MAAAA,OAAO,CAAPA,YAAO,CAAPA;AADF,KAAA,MAEO;AACLE,MAAAA,eAAe,CAAfA,eAAAA,GAAAA,IAAAA,CACE,UAAA,KAAA,EAAiB;AACfJ,QAAAA,YAAY,GAAZA,KAAAA;AACAE,QAAAA,OAAO,CAAPA,YAAO,CAAPA;AAHJE,OAAAA;AAOH;AAGD;;AAAA,MAAIL,cAAc,CAAdA,IAAAA,GAAAA,CAAAA,IAA2B,CAA/B,wBAAA,EAA0D;AACxDE,IAAAA,wBAAwB,GAAGG,eAAe,CAAfA,YAAAA,CAAAA,WAAAA,CAAAA,yBAAAA,EAA3BH,gBAA2BG,CAA3BH;AAKH;AAED;AAAA,OAAO,SAAA,MAAA,CAAA,OAAA,EAA2D;AAChEF,EAAAA,cAAc,CAAdA,MAAAA,CAAAA,OAAAA;;AAEA,MAAIA,cAAc,CAAdA,IAAAA,KAAAA,CAAAA,IAAJ,wBAAA,EAA2D;AACzDE,IAAAA,wBAAwB,CAAxBA,MAAAA;;AACAA,IAAAA,wBAAwB,GAAxBA,IAAAA;AAEH;AAED;AAAA,OAAO,SAAA,KAAA,GAAuB;AAC5BF,EAAAA,cAAc,CAAdA,KAAAA;;AAEA,MAAA,wBAAA,EAA8B;AAC5BE,IAAAA,wBAAwB,CAAxBA,MAAAA;;AACAA,IAAAA,wBAAwB,GAAxBA,IAAAA;AAEH;AAED;AAAA,eAAe;AACbI,EAAAA,GAAG,EADU,GAAA;AAEbC,EAAAA,MAAM,EAFO,MAAA;AAGbC,EAAAA,KAAK,EAHP;AAAe,CAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventSubscription} from 'react-native';\nimport NativeInterface from './nativeInterface';\nimport * as Types from './types';\n\nconst DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';\n\nconst _subscriptions = new Set<Types.NetInfoChangeHandler>();\nlet _latestState: Types.NetInfoState | null = null;\n\nlet _nativeEventSubscription: NativeEventSubscription | null = null;\n\nfunction _listenerHandler(state: Types.NetInfoState): void {\n  _latestState = state;\n  _subscriptions.forEach((handler): void => handler(state));\n}\n\nexport function add(\n  handler: Types.NetInfoChangeHandler,\n  latestOnListen: boolean = true,\n): void {\n  // Add the subscription handler to our set\n  _subscriptions.add(handler);\n\n  // Send it the latest data we have\n  if (latestOnListen) {\n    if (_latestState) {\n      handler(_latestState);\n    } else {\n      NativeInterface.getCurrentState().then(\n        (state): void => {\n          _latestState = state;\n          handler(_latestState);\n        },\n      );\n    }\n  }\n\n  // Subscribe to native events, if we aren't already\n  if (_subscriptions.size > 0 && !_nativeEventSubscription) {\n    _nativeEventSubscription = NativeInterface.eventEmitter.addListener(\n      DEVICE_CONNECTIVITY_EVENT,\n      _listenerHandler,\n    );\n  }\n}\n\nexport function remove(handler: Types.NetInfoChangeHandler): void {\n  _subscriptions.delete(handler);\n\n  if (_subscriptions.size === 0 && _nativeEventSubscription) {\n    _nativeEventSubscription.remove();\n    _nativeEventSubscription = null;\n  }\n}\n\nexport function clear(): void {\n  _subscriptions.clear();\n\n  if (_nativeEventSubscription) {\n    _nativeEventSubscription.remove();\n    _nativeEventSubscription = null;\n  }\n}\n\nexport default {\n  add,\n  remove,\n  clear,\n};\n"]},"metadata":{},"sourceType":"module"}