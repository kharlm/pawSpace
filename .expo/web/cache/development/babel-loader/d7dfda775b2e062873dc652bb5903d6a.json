{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ExponentAV from \"./ExponentAV\";\nexport * from \"./Audio/Recording\";\nexport * from \"./Audio/Sound\";\nexport { setIsEnabledAsync } from \"./Audio/AudioAvailability\";\nexport { PitchCorrectionQuality } from \"./AV\";\nexport var INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;\nexport var INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;\nexport var INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;\nexport var INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;\nexport var INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;\n\nvar _isValueValid = function _isValueValid(value, validValues) {\n  return validValues.filter(function (validValue) {\n    return validValue === value;\n  }).length > 0;\n};\n\nvar _findMissingKeys = function _findMissingKeys(object, requiredKeys) {\n  return requiredKeys.filter(function (requiredKey) {\n    return !(requiredKey in object);\n  });\n};\n\nexport function setAudioModeAsync(mode) {\n  var missingKeys;\n  return _regeneratorRuntime.async(function setAudioModeAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          missingKeys = _findMissingKeys(mode, ['allowsRecordingIOS', 'interruptionModeIOS', 'playsInSilentModeIOS', 'staysActiveInBackground', 'interruptionModeAndroid', 'shouldDuckAndroid', 'playThroughEarpieceAndroid']);\n\n          if (!(missingKeys.length > 0)) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new Error(\"Audio mode attempted to be set without the required keys: \" + JSON.stringify(missingKeys));\n\n        case 3:\n          if (_isValueValid(mode.interruptionModeIOS, [INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS, INTERRUPTION_MODE_IOS_DO_NOT_MIX, INTERRUPTION_MODE_IOS_DUCK_OTHERS])) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new Error(\"\\\"interruptionModeIOS\\\" was set to an invalid value.\");\n\n        case 5:\n          if (_isValueValid(mode.interruptionModeAndroid, [INTERRUPTION_MODE_ANDROID_DO_NOT_MIX, INTERRUPTION_MODE_ANDROID_DUCK_OTHERS])) {\n            _context.next = 7;\n            break;\n          }\n\n          throw new Error(\"\\\"interruptionModeAndroid\\\" was set to an invalid value.\");\n\n        case 7:\n          if (!(typeof mode.allowsRecordingIOS !== 'boolean' || typeof mode.playsInSilentModeIOS !== 'boolean' || typeof mode.staysActiveInBackground !== 'boolean' || typeof mode.shouldDuckAndroid !== 'boolean' || typeof mode.playThroughEarpieceAndroid !== 'boolean')) {\n            _context.next = 9;\n            break;\n          }\n\n          throw new Error('\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.');\n\n        case 9:\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(ExponentAV.setAudioMode(mode));\n\n        case 11:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["../src/Audio.ts"],"names":[],"mappings":";AAAA,OAAO,UAAP;AAEA;AACA;AACA,SAAS,iBAAT;AACA,SAAS,sBAAT;AAYA,OAAO,IAAM,qCAAqC,GAAG,CAA9C;AACP,OAAO,IAAM,gCAAgC,GAAG,CAAzC;AACP,OAAO,IAAM,iCAAiC,GAAG,CAA1C;AAEP,OAAO,IAAM,oCAAoC,GAAG,CAA7C;AACP,OAAO,IAAM,qCAAqC,GAAG,CAA9C;;AAGP,IAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,KAAD,EAAa,WAAb,EAA4C;AAChE,SAAO,WAAW,CAAC,MAAZ,CAAmB,UAAA,UAAU;AAAA,WAAI,UAAU,KAAK,KAAnB;AAAA,GAA7B,EAAuD,MAAvD,GAAgE,CAAvE;AACD,CAFD;;AAKA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,MAAD,EAAiB,YAAjB,EAA+C;AACtE,SAAO,YAAY,CAAC,MAAb,CAAoB,UAAA,WAAW;AAAA,WAAI,EAAE,WAAW,IAAI,MAAjB,CAAJ;AAAA,GAA/B,CAAP;AACD,CAFD;;AAIA,OAAO,SAAe,iBAAf,CAAiC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,UAAA,WADD,GACe,gBAAgB,CAAC,IAAD,EAAO,CACzC,oBADyC,EAEzC,qBAFyC,EAGzC,sBAHyC,EAIzC,yBAJyC,EAKzC,yBALyC,EAMzC,mBANyC,EAOzC,4BAPyC,CAAP,CAD/B;;AAAA,gBAUD,WAAW,CAAC,MAAZ,GAAqB,CAVpB;AAAA;AAAA;AAAA;;AAAA,gBAWG,IAAI,KAAJ,gEACyD,IAAI,CAAC,SAAL,CAAe,WAAf,CADzD,CAXH;;AAAA;AAAA,cAgBF,aAAa,CAAC,IAAI,CAAC,mBAAN,EAA2B,CACvC,qCADuC,EAEvC,gCAFuC,EAGvC,iCAHuC,CAA3B,CAhBX;AAAA;AAAA;AAAA;;AAAA,gBAsBG,IAAI,KAAJ,wDAtBH;;AAAA;AAAA,cAyBF,aAAa,CAAC,IAAI,CAAC,uBAAN,EAA+B,CAC3C,oCAD2C,EAE3C,qCAF2C,CAA/B,CAzBX;AAAA;AAAA;AAAA;;AAAA,gBA8BG,IAAI,KAAJ,4DA9BH;;AAAA;AAAA,gBAiCH,OAAO,IAAI,CAAC,kBAAZ,KAAmC,SAAnC,IACA,OAAO,IAAI,CAAC,oBAAZ,KAAqC,SADrC,IAEA,OAAO,IAAI,CAAC,uBAAZ,KAAwC,SAFxC,IAGA,OAAO,IAAI,CAAC,iBAAZ,KAAkC,SAHlC,IAIA,OAAO,IAAI,CAAC,0BAAZ,KAA2C,SArCxC;AAAA;AAAA;AAAA;;AAAA,gBAuCG,IAAI,KAAJ,CACJ,iJADI,CAvCH;;AAAA;AAAA;AAAA,2CA2CQ,UAAU,CAAC,YAAX,CAAwB,IAAxB,CA3CR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import ExponentAV from './ExponentAV';\n\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport { setIsEnabledAsync } from './Audio/AudioAvailability';\nexport { PitchCorrectionQuality } from './AV';\n\nexport type AudioMode = {\n  allowsRecordingIOS: boolean;\n  interruptionModeIOS: number;\n  playsInSilentModeIOS: boolean;\n  staysActiveInBackground: boolean;\n  interruptionModeAndroid: number;\n  shouldDuckAndroid: boolean;\n  playThroughEarpieceAndroid: boolean;\n};\n\nexport const INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;\nexport const INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;\n\nexport const INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;\n\n// Returns true if value is in validValues, and false if not.\nconst _isValueValid = (value: any, validValues: any[]): boolean => {\n  return validValues.filter(validValue => validValue === value).length > 0;\n};\n\n// Returns array of missing keys in object. Returns an empty array if no missing keys are found.\nconst _findMissingKeys = (object: Object, requiredKeys: any[]): any[] => {\n  return requiredKeys.filter(requiredKey => !(requiredKey in object));\n};\n\nexport async function setAudioModeAsync(mode: AudioMode): Promise<void> {\n  const missingKeys = _findMissingKeys(mode, [\n    'allowsRecordingIOS',\n    'interruptionModeIOS',\n    'playsInSilentModeIOS',\n    'staysActiveInBackground',\n    'interruptionModeAndroid',\n    'shouldDuckAndroid',\n    'playThroughEarpieceAndroid',\n  ]);\n  if (missingKeys.length > 0) {\n    throw new Error(\n      `Audio mode attempted to be set without the required keys: ${JSON.stringify(missingKeys)}`\n    );\n  }\n  if (\n    !_isValueValid(mode.interruptionModeIOS, [\n      INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n      INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n      INTERRUPTION_MODE_IOS_DUCK_OTHERS,\n    ])\n  ) {\n    throw new Error(`\"interruptionModeIOS\" was set to an invalid value.`);\n  }\n  if (\n    !_isValueValid(mode.interruptionModeAndroid, [\n      INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n      INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n    ])\n  ) {\n    throw new Error(`\"interruptionModeAndroid\" was set to an invalid value.`);\n  }\n  if (\n    typeof mode.allowsRecordingIOS !== 'boolean' ||\n    typeof mode.playsInSilentModeIOS !== 'boolean' ||\n    typeof mode.staysActiveInBackground !== 'boolean' ||\n    typeof mode.shouldDuckAndroid !== 'boolean' ||\n    typeof mode.playThroughEarpieceAndroid !== 'boolean'\n  ) {\n    throw new Error(\n      '\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.'\n    );\n  }\n  return await ExponentAV.setAudioMode(mode);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}