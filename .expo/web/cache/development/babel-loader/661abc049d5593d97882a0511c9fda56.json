{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport db from \"../config/firebase\";\nimport { orderBy } from 'lodash';\nimport uuid from 'uuid';\nexport var addMessage = function addMessage(receiver, text) {\n  var id = uuid.v4();\n  return function (dispatch, getState) {\n    var _getState$dog = getState().dog,\n        dogId = _getState$dog.dogId,\n        photo = _getState$dog.photo,\n        dogTag = _getState$dog.dogTag;\n\n    try {\n      var message = {\n        members: [dogId, receiver.user.id].sort(),\n        message: text,\n        photo: photo,\n        dogTag: dogTag,\n        receiver: receiver.user,\n        dogId: dogId,\n        date: new Date().getTime(),\n        id: id\n      };\n      db.collection('messages').doc().set(message);\n      dispatch(getMessages());\n    } catch (e) {\n      console.error(e);\n    }\n  };\n};\nexport var getMessages = function getMessages() {\n  return function _callee(dispatch, getState) {\n    var dogId, messages, uniqueMessages;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dogId = getState().dog.dogId;\n            messages = [];\n            uniqueMessages = [];\n\n            try {\n              db.collection('messages').where('members', 'array-contains', dogId).onSnapshot(function (querySnapshot) {\n                querySnapshot.forEach(function (response) {\n                  var message = response.data();\n                  messages.push(message);\n                  uniqueMessages = Array.from(new Set(messages.map(function (a) {\n                    return a.id;\n                  }))).map(function (id) {\n                    return messages.find(function (a) {\n                      return a.id === id;\n                    });\n                  });\n                });\n                dispatch({\n                  type: 'GET_MESSAGES',\n                  payload: orderBy(uniqueMessages, 'date', 'desc')\n                });\n              });\n            } catch (e) {\n              console.error(e);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/kharl/pawSpace/actions/message.js"],"names":["db","orderBy","uuid","addMessage","receiver","text","id","v4","dispatch","getState","dog","dogId","photo","dogTag","message","members","user","sort","date","Date","getTime","collection","doc","set","getMessages","e","console","error","messages","uniqueMessages","where","onSnapshot","querySnapshot","forEach","response","data","push","Array","from","Set","map","a","find","type","payload"],"mappings":";AAAA,OAAOA,EAAP;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAWC,IAAX,EAAoB;AAC5C,MAAMC,EAAE,GAAGJ,IAAI,CAACK,EAAL,EAAX;AACA,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA,wBACIA,QAAQ,GAAGC,GADf;AAAA,QACrBC,KADqB,iBACrBA,KADqB;AAAA,QACdC,KADc,iBACdA,KADc;AAAA,QACPC,MADO,iBACPA,MADO;;AAE7B,QAAI;AACF,UAAMC,OAAO,GAAG;AACdC,QAAAA,OAAO,EAAE,CAACJ,KAAD,EAAOP,QAAQ,CAACY,IAAT,CAAcV,EAArB,EAAyBW,IAAzB,EADK;AAEdH,QAAAA,OAAO,EAAET,IAFK;AAGdO,QAAAA,KAAK,EAAEA,KAHO;AAIdC,QAAAA,MAAM,EAAEA,MAJM;AAKdT,QAAAA,QAAQ,EAAEA,QAAQ,CAACY,IALL;AAMdL,QAAAA,KAAK,EAAEA,KANO;AAOdO,QAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EAPQ;AAQdd,QAAAA,EAAE,EAAEA;AARU,OAAhB;AAUAN,MAAAA,EAAE,CAACqB,UAAH,CAAc,UAAd,EAA0BC,GAA1B,GAAgCC,GAAhC,CAAoCT,OAApC;AACAN,MAAAA,QAAQ,CAACgB,WAAW,EAAZ,CAAR;AACD,KAbD,CAaE,OAAMC,CAAN,EAAS;AACTC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,GAlBD;AAmBD,CArBM;AAuBP,OAAO,IAAMD,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC/B,SAAO,iBAAOhB,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGE,YAAAA,KADH,GACaF,QAAQ,GAAGC,GADxB,CACGC,KADH;AAEDiB,YAAAA,QAFC,GAEU,EAFV;AAGDC,YAAAA,cAHC,GAGgB,EAHhB;;AAKL,gBAAI;AAEF7B,cAAAA,EAAE,CAACqB,UAAH,CAAc,UAAd,EAA0BS,KAA1B,CAAgC,SAAhC,EAA2C,gBAA3C,EAA6DnB,KAA7D,EAAoEoB,UAApE,CAA+E,UAACC,aAAD,EAAmB;AAClGA,gBAAAA,aAAa,CAACC,OAAd,CAAsB,UAACC,QAAD,EAAc;AAClC,sBAAIpB,OAAO,GAAGoB,QAAQ,CAACC,IAAT,EAAd;AAEEP,kBAAAA,QAAQ,CAACQ,IAAT,CAActB,OAAd;AAGAe,kBAAAA,cAAc,GAAGQ,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQX,QAAQ,CAACY,GAAT,CAAa,UAAAC,CAAC;AAAA,2BAAIA,CAAC,CAACnC,EAAN;AAAA,mBAAd,CAAR,CAAX,EAA6CkC,GAA7C,CAAiD,UAAAlC,EAAE,EAAI;AACxE,2BAAOsB,QAAQ,CAACc,IAAT,CAAc,UAAAD,CAAC;AAAA,6BAAIA,CAAC,CAACnC,EAAF,KAASA,EAAb;AAAA,qBAAf,CAAP;AACR,mBAFyB,CAAjB;AAIH,iBAVD;AAYCE,gBAAAA,QAAQ,CAAC;AAAEmC,kBAAAA,IAAI,EAAE,cAAR;AAAwBC,kBAAAA,OAAO,EAAE3C,OAAO,CAAC4B,cAAD,EAAiB,MAAjB,EAAwB,MAAxB;AAAxC,iBAAD,CAAR;AACF,eAdC;AAgBD,aAlBD,CAkBE,OAAMJ,CAAN,EAAS;AACTC,cAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;;AAzBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA4BD,CA7BM","sourcesContent":["import db from '../config/firebase';\nimport { orderBy } from 'lodash'\nimport uuid from 'uuid'\n\nexport const addMessage = (receiver, text) => {\n  const id = uuid.v4()\n  return (dispatch, getState) => {\n    const { dogId, photo, dogTag } = getState().dog\n    try {\n      const message = {\n        members: [dogId,receiver.user.id].sort(),\n        message: text,\n        photo: photo,\n        dogTag: dogTag,\n        receiver: receiver.user,\n        dogId: dogId,\n        date: new Date().getTime(),\n        id: id\n      }\n      db.collection('messages').doc().set(message)\n      dispatch(getMessages())\n    } catch(e) {\n      console.error(e)\n    }\n  }\n}\n\nexport const getMessages = () => {\n  return async (dispatch, getState) => {\n    const { dogId } = getState().dog\n    let messages = []\n    let uniqueMessages = []\n\n    try {\n\n      db.collection('messages').where('members', 'array-contains', dogId).onSnapshot((querySnapshot) => {\n      querySnapshot.forEach((response) => {\n        let message = response.data()\n         \n          messages.push(message);  \n         \n          // This checks for the ids of the messages and creates a new array using object type set\n          uniqueMessages = Array.from(new Set(messages.map(a => a.id))).map(id => {\n          return messages.find(a => a.id === id)\n })\n        \n      })\n\n       dispatch({ type: 'GET_MESSAGES', payload: orderBy(uniqueMessages, 'date','desc')})\n    })\n   \n    } catch(e) {\n      console.error(e)\n    }\n    \n  }\n}"]},"metadata":{},"sourceType":"module"}