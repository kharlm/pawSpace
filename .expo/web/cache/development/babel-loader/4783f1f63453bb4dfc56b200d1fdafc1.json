{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport validateScreenOptions from \"./validateScreenOptions\";\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return _objectSpread({}, navigationOptions, configurer(_objectSpread({}, configProps, {\n      navigationOptions: navigationOptions\n    })));\n  }\n\n  if (typeof configurer === 'object') {\n    return _objectSpread({}, navigationOptions, configurer);\n  }\n\n  return navigationOptions;\n}\n\nexport default (function (routeConfigs, navigatorScreenConfig) {\n  return function (navigation, screenProps) {\n    var state = navigation.state;\n    var route = state;\n    invariant(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');\n    var Component = getScreenForRouteName(routeConfigs, route.routeName);\n    var routeConfig = routeConfigs[route.routeName];\n    var routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;\n    var componentScreenConfig = Component.navigationOptions;\n    var configOptions = {\n      navigation: navigation,\n      screenProps: screenProps || {}\n    };\n    var outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n    outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);\n    outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n    validateScreenOptions(outputConfig, route);\n    return outputConfig;\n  };\n});","map":{"version":3,"sources":["../../src/routers/createConfigGetter.js"],"names":["configurer","navigationOptions","state","route","invariant","Component","getScreenForRouteName","routeConfig","routeConfigs","routeScreenConfig","componentScreenConfig","configOptions","navigation","screenProps","outputConfig","applyConfig","validateScreenOptions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,SAAA;AAEA,OAAA,qBAAA;AACA,OAAA,qBAAA;;AAEA,SAAA,WAAA,CAAA,UAAA,EAAA,iBAAA,EAAA,WAAA,EAAiE;AAC/D,MAAI,OAAA,UAAA,KAAJ,UAAA,EAAsC;AACpC,WAAA,aAAA,CAAA,EAAA,EAAA,iBAAA,EAEKA,UAAU,CAAA,aAAA,CAAA,EAAA,EAAA,WAAA,EAAA;AAEXC,MAAAA,iBAAAA,EAAAA;AAFW,KAAA,CAAA,CAFf,CAAA;AAOD;;AACD,MAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClC,WAAA,aAAA,CAAA,EAAA,EAAA,iBAAA,EAAA,UAAA,CAAA;AAID;;AACD,SAAA,iBAAA;AACD;;AAED,gBAAe,UAAA,YAAA,EAAA,qBAAA;AAAA,SAAyC,UAAA,UAAA,EAAA,WAAA,EAGnD;AAAA,QACKC,KADL,GACH,UADG,CACKA,KADL;AAEH,QAAMC,KAAK,GAAX,KAAA;AAEAC,IAAAA,SAAS,CACPD,KAAK,CAALA,SAAAA,IAAmB,OAAOA,KAAK,CAAZ,SAAA,KADZ,QAAA,EAATC,gEAAS,CAATA;AAKA,QAAMC,SAAS,GAAGC,qBAAqB,CAAA,YAAA,EAAeH,KAAK,CAA3D,SAAuC,CAAvC;AAEA,QAAMI,WAAW,GAAGC,YAAY,CAACL,KAAK,CAAtC,SAAgC,CAAhC;AAEA,QAAMM,iBAAiB,GACrBF,WAAW,KAAXA,SAAAA,GAAAA,IAAAA,GAAmCA,WAAW,CADhD,iBAAA;AAEA,QAAMG,qBAAqB,GAAGL,SAAS,CAAvC,iBAAA;AAEA,QAAMM,aAAa,GAAG;AAAEC,MAAAA,UAAF,EAAEA,UAAF;AAAcC,MAAAA,WAAW,EAAEA,WAAW,IAAI;AAA1C,KAAtB;AAEA,QAAIC,YAAY,GAAGC,WAAW,CAAA,qBAAA,EAAA,EAAA,EAA9B,aAA8B,CAA9B;AACAD,IAAAA,YAAY,GAAGC,WAAW,CAAA,qBAAA,EAAA,YAAA,EAA1BD,aAA0B,CAA1BA;AAKAA,IAAAA,YAAY,GAAGC,WAAW,CAAA,iBAAA,EAAA,YAAA,EAA1BD,aAA0B,CAA1BA;AAEAE,IAAAA,qBAAqB,CAAA,YAAA,EAArBA,KAAqB,CAArBA;AAEA,WAAA,YAAA;AAhCF,GAAe;AAAA,CAAf","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {} };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]},"metadata":{},"sourceType":"module"}