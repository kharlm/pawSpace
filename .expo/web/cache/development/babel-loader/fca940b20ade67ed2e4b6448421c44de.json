{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nvar _jsxFileName = \"/Users/kharl/pawSpace/node_modules/react-native-parsed-text/src/ParsedText.js\";\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PropTypes from 'prop-types';\nimport TextExtraction from \"./lib/TextExtraction\";\nexport var PATTERNS = {\n  url: /(https?:\\/\\/|www\\.)[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/=]*[-a-zA-Z0-9@:%_\\+~#?&\\/=])*/i,\n  phone: /[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,7}/,\n  email: /\\S+@\\S+\\.\\S+/\n};\nvar defaultParseShape = PropTypes.shape(_objectSpread({}, Text.propTypes, {\n  type: PropTypes.oneOf(Object.keys(PATTERNS)).isRequired\n}));\nvar customParseShape = PropTypes.shape(_objectSpread({}, Text.propTypes, {\n  pattern: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp)]).isRequired\n}));\n\nvar ParsedText = function (_React$Component) {\n  _inherits(ParsedText, _React$Component);\n\n  function ParsedText() {\n    _classCallCheck(this, ParsedText);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ParsedText).apply(this, arguments));\n  }\n\n  _createClass(ParsedText, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      this._root.setNativeProps(nativeProps);\n    }\n  }, {\n    key: \"getPatterns\",\n    value: function getPatterns() {\n      return this.props.parse.map(function (option) {\n        var type = option.type,\n            patternOption = _objectWithoutProperties(option, [\"type\"]);\n\n        if (type) {\n          if (!PATTERNS[type]) {\n            throw new Error(option.type + \" is not a supported type\");\n          }\n\n          patternOption.pattern = PATTERNS[type];\n        }\n\n        return patternOption;\n      });\n    }\n  }, {\n    key: \"getParsedText\",\n    value: function getParsedText() {\n      var _this = this;\n\n      if (!this.props.parse) {\n        return this.props.children;\n      }\n\n      if (typeof this.props.children !== 'string') {\n        return this.props.children;\n      }\n\n      var textExtraction = new TextExtraction(this.props.children, this.getPatterns());\n      return textExtraction.parse().map(function (props, index) {\n        var parentStyle = _this.props.style;\n\n        var style = props.style,\n            remainder = _objectWithoutProperties(props, [\"style\"]);\n\n        return React.createElement(Text, _extends({\n          key: \"parsedText-\" + index,\n          style: [parentStyle, style]\n        }, _this.props.childrenProps, remainder, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          }\n        }));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = _objectSpread({}, this.props),\n          parse = _this$props.parse,\n          childrenProps = _this$props.childrenProps,\n          remainder = _objectWithoutProperties(_this$props, [\"parse\", \"childrenProps\"]);\n\n      return React.createElement(Text, _extends({\n        ref: function ref(_ref) {\n          return _this2._root = _ref;\n        }\n      }, remainder, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        }\n      }), this.getParsedText());\n    }\n  }]);\n\n  return ParsedText;\n}(React.Component);\n\nParsedText.displayName = 'ParsedText';\nParsedText.propTypes = _objectSpread({}, Text.propTypes, {\n  parse: PropTypes.arrayOf(PropTypes.oneOfType([defaultParseShape, customParseShape])),\n  childrenProps: PropTypes.shape(Text.propTypes)\n});\nParsedText.defaultProps = {\n  parse: null,\n  childrenProps: {}\n};\nexport default ParsedText;","map":{"version":3,"sources":["/Users/kharl/pawSpace/node_modules/react-native-parsed-text/src/ParsedText.js"],"names":["React","PropTypes","TextExtraction","PATTERNS","url","phone","email","defaultParseShape","shape","Text","propTypes","type","oneOf","Object","keys","isRequired","customParseShape","pattern","oneOfType","string","instanceOf","RegExp","ParsedText","nativeProps","_root","setNativeProps","props","parse","map","option","patternOption","Error","children","textExtraction","getPatterns","index","parentStyle","style","remainder","childrenProps","ref","getParsedText","Component","displayName","arrayOf","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport TextExtraction from './lib/TextExtraction';\n\nexport const PATTERNS = {\n  url: /(https?:\\/\\/|www\\.)[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/=]*[-a-zA-Z0-9@:%_\\+~#?&\\/=])*/i,\n  phone: /[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,7}/,\n  email: /\\S+@\\S+\\.\\S+/,\n};\n\nconst defaultParseShape = PropTypes.shape({\n  ...Text.propTypes,\n  type: PropTypes.oneOf(Object.keys(PATTERNS)).isRequired,\n});\n\nconst customParseShape = PropTypes.shape({\n  ...Text.propTypes,\n  pattern: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp)]).isRequired,\n});\n\nclass ParsedText extends React.Component {\n  static displayName = 'ParsedText';\n\n  static propTypes = {\n    ...Text.propTypes,\n    parse: PropTypes.arrayOf(\n      PropTypes.oneOfType([defaultParseShape, customParseShape]),\n    ),\n    childrenProps: PropTypes.shape(Text.propTypes),\n  };\n\n  static defaultProps = {\n    parse: null,\n    childrenProps: {},\n  };\n\n  setNativeProps(nativeProps) {\n    this._root.setNativeProps(nativeProps);\n  }\n\n  getPatterns() {\n    return this.props.parse.map(option => {\n      const { type, ...patternOption } = option;\n      if (type) {\n        if (!PATTERNS[type]) {\n          throw new Error(`${option.type} is not a supported type`);\n        }\n        patternOption.pattern = PATTERNS[type];\n      }\n\n      return patternOption;\n    });\n  }\n\n  getParsedText() {\n    if (!this.props.parse) {\n      return this.props.children;\n    }\n    if (typeof this.props.children !== 'string') {\n      return this.props.children;\n    }\n\n    const textExtraction = new TextExtraction(\n      this.props.children,\n      this.getPatterns(),\n    );\n\n    return textExtraction.parse().map((props, index) => {\n      const { style: parentStyle } = this.props\n      const { style, ...remainder } = props\n      return (\n        <Text\n          key={`parsedText-${index}`}\n          style={[parentStyle, style]}\n          {...this.props.childrenProps}\n          {...remainder}\n        />\n      );\n    });\n  }\n\n  render() {\n    // Discard custom props before passing remainder to Text\n    const { parse, childrenProps, ...remainder } = { ...this.props };\n\n    return (\n      <Text ref={ref => (this._root = ref)} {...remainder}>\n        {this.getParsedText()}\n      </Text>\n    );\n  }\n}\n\nexport default ParsedText;\n"]},"metadata":{},"sourceType":"module"}