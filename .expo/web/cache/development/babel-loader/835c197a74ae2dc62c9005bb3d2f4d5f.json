{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/kharl/pawSpace/screens/ChatMatch.js\";\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { getDog, getDogs } from \"../actions/dog\";\nimport Card from \"./Card\";\nimport * as firebase from 'firebase';\nimport DogParks from \"./DogParks\";\nimport SwipeCards from 'react-native-swipe-cards';\nimport db from \"../config/firebase\";\nimport ConfettiCannon from 'react-native-confetti-cannon';\nimport * as Permissions from 'expo-permissions';\nimport * as Location from 'expo-location';\n\nvar ChatMatch = function (_Component) {\n  _inherits(ChatMatch, _Component);\n\n  function ChatMatch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChatMatch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChatMatch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      chats: []\n    };\n\n    _this.getChat = function _callee() {\n      var dogs, query, items, i, res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"in get chat\");\n              dogs = [];\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(db.collection('dogs').where('dogId', '==', _this.props.dog.dogId).get());\n\n            case 4:\n              query = _context.sent;\n              query.forEach(function (response) {\n                dogs.push(response.data());\n              });\n              items = [];\n\n              for (i = 0; i < dogs[0].chat.length; i++) {\n                items.push(dogs[0].chat[i]);\n              }\n\n              res = JSON.stringify(items);\n\n              _this.setState({\n                chats: items.reverse()\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatMatch, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.getChat();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        }\n      }, React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        }\n      }, this.state.chats.map(function (uri) {\n        if (uri.user) {\n          return React.createElement(TouchableOpacity, {\n            style: styles.imgRow,\n            onPress: function onPress() {\n              return _this2.props.navigation.navigate('Chat', {\n                user: uri.user,\n                page: 'ChatMatch'\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32\n            }\n          }, React.createElement(Image, {\n            style: styles.img,\n            source: {\n              uri: uri.user.photoUrl\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33\n            }\n          }), React.createElement(Text, {\n            style: [styles.bold, styles.center],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            }\n          }, uri.user.name));\n        } else {\n          return null;\n        }\n      })));\n    }\n  }]);\n\n  return ChatMatch;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  img: {\n    width: 90,\n    height: 90,\n    borderRadius: 45,\n    margin: 10,\n    backgroundColor: '#fff'\n  },\n  bold: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  center: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center'\n  },\n  imgRow: {\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    padding: 15\n  }\n});\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getDog: getDog,\n    getDogs: getDogs\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dog: state.dog,\n    cards: state.cards\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatMatch);","map":{"version":3,"sources":["/Users/kharl/pawSpace/screens/ChatMatch.js"],"names":["React","Component","connect","bindActionCreators","getDog","getDogs","Card","firebase","DogParks","SwipeCards","db","ConfettiCannon","Permissions","Location","ChatMatch","state","chats","getChat","console","log","dogs","collection","where","props","dog","dogId","get","query","forEach","response","push","data","items","i","chat","length","res","JSON","stringify","setState","reverse","styles","container","map","uri","user","imgRow","navigation","navigate","page","img","photoUrl","bold","center","name","StyleSheet","create","flex","width","height","borderRadius","margin","backgroundColor","fontSize","fontWeight","alignItems","justifyContent","textAlign","flexWrap","flexDirection","padding","mapDispatchToProps","dispatch","mapStateToProps","cards"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { View, Text, StyleSheet, Image, Dimensions, Platform,ScrollView, TouchableOpacity} from \"react-native\";\nimport {getDog,getDogs} from '../actions/dog'\nimport Card from './Card';\nimport * as firebase from 'firebase';\nimport DogParks from './DogParks';\nimport SwipeCards from 'react-native-swipe-cards'\nimport db from '../config/firebase';\nimport ConfettiCannon from 'react-native-confetti-cannon';\nimport * as Permissions from 'expo-permissions'\nimport * as Location from 'expo-location'\n\nclass ChatMatch extends Component {\n    state = {\n        chats: []\n      }\n\n      componentWillMount(){\n          this.getChat()\n       \n      }\n    render(){\n     \n        return(\n            <View style={styles.container} >\n            <ScrollView>\n              {this.state.chats.map((uri)=>{\n                if(uri.user){\n                  return (\n                    <TouchableOpacity style={styles.imgRow } onPress={() => this.props.navigation.navigate('Chat', {user: uri.user,page:'ChatMatch'})}>\n                      <Image style={styles.img} source={{uri: uri.user.photoUrl}} />\n                      <Text style={[styles.bold, styles.center]}>{uri.user.name}</Text>\n                    </TouchableOpacity>\n                  );\n                }\n                else{\n                return null\n                }\n              })}\n            </ScrollView>\n           </View>\n        )\n\n    }\n\n\ngetChat = async() => {\n    console.log(\"in get chat\")\n    let dogs = []\n    const query = await db.collection('dogs').where('dogId', '==', this.props.dog.dogId).get()\n    \n    query.forEach(function(response) {\n      dogs.push(response.data())\n      })\n      let items=[]\n      \n      for(let i=0; i<dogs[0].chat.length;i++){\n          items.push(dogs[0].chat[i])\n      }\n        let res = JSON.stringify(items)\n        //console.log(\"items: \"+res)\n        this.setState({ chats: items.reverse() });\n}\n}\nvar styles = StyleSheet.create({\n    container: {\n        flex: 1,\n      },\n    img: {\n        width: 90,\n        height: 90,\n        borderRadius: 45,\n        margin: 10,\n        backgroundColor: '#fff',\n    },\n    bold: {\n        fontSize: 18,\n        fontWeight: 'bold',\n      },\n      center: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        textAlign: 'center'\n      },\n      imgRow: {\n\t\tflexWrap: 'wrap',\n\t\tflexDirection: 'row',\n\t\tpadding: 15,\n  },\n})\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({getDog,getDogs}, dispatch)\n  }\n  \n  const mapStateToProps = (state) => {\n    return {\n    \n      dog: state.dog,\n      cards: state.cards\n    }\n  }\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(ChatMatch)"]},"metadata":{},"sourceType":"module"}