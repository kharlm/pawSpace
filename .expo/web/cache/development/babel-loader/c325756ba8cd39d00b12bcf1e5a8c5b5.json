{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/kharl/pawSpace/node_modules/react-native-parallax-swiper/src/ParallaxSwiper.js\";\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PropTypes from 'prop-types';\nimport ParallaxSwiperPage, { ParallaxSwiperPagePropTypes } from \"./ParallaxSwiperPage\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    deviceWidth = _Dimensions$get.width,\n    deviceHeight = _Dimensions$get.height;\n\nvar ParallaxSwiper = function (_Component) {\n  _inherits(ParallaxSwiper, _Component);\n\n  function ParallaxSwiper() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ParallaxSwiper);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ParallaxSwiper)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      width: deviceWidth,\n      height: deviceHeight\n    };\n\n    _this.setScrollViewSize = function (width, height) {\n      _this.setState({\n        width: width,\n        height: height\n      });\n    };\n\n    _this.animatedScrollViewHasScrolled = false;\n    _this.pageIndex = 0;\n    return _this;\n  }\n\n  _createClass(ParallaxSwiper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var scrollToIndex = this.props.scrollToIndex;\n\n      if (scrollToIndex) {\n        setTimeout(function () {\n          _this2.scrollToIndex(scrollToIndex, false);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.scrollToIndex(nextProps.scrollToIndex);\n    }\n  }, {\n    key: \"onScrollEnd\",\n    value: function onScrollEnd(e) {\n      var _this$props = this.props,\n          vertical = _this$props.vertical,\n          onMomentumScrollEnd = _this$props.onMomentumScrollEnd;\n      var contentOffset = vertical ? e.nativeEvent.contentOffset.y : e.nativeEvent.contentOffset.x;\n      var viewSize = vertical ? this.state.height : this.state.width;\n      this.pageIndex = Math.abs((contentOffset / viewSize).toFixed()) || 0;\n      onMomentumScrollEnd(this.pageIndex);\n    }\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index) {\n      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var _this$props2 = this.props,\n          vertical = _this$props2.vertical,\n          dividerWidth = _this$props2.dividerWidth,\n          animatedValue = _this$props2.animatedValue;\n      var pageWidth = this.state.width + dividerWidth;\n      var pageHeight = this.state.height;\n      var scrollOffset = vertical ? index * pageHeight : index * pageWidth;\n\n      if (!this.animatedScrollViewHasScrolled) {\n        animatedValue.setValue(scrollOffset);\n        this.animatedScrollViewHasScrolled = true;\n      }\n\n      this.animatedScrollView._component.scrollTo({\n        x: vertical ? 0 : scrollOffset,\n        y: vertical ? scrollOffset : 0,\n        animated: animated\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          speed = _this$props3.speed,\n          backgroundColor = _this$props3.backgroundColor,\n          dividerColor = _this$props3.dividerColor,\n          dividerWidth = _this$props3.dividerWidth,\n          showsVerticalScrollIndicator = _this$props3.showsVerticalScrollIndicator,\n          showsHorizontalScrollIndicator = _this$props3.showsHorizontalScrollIndicator,\n          vertical = _this$props3.vertical,\n          animatedValue = _this$props3.animatedValue,\n          scrollEnabled = _this$props3.scrollEnabled,\n          showProgressBar = _this$props3.showProgressBar,\n          progressBarThickness = _this$props3.progressBarThickness,\n          progressBarBackgroundColor = _this$props3.progressBarBackgroundColor,\n          progressBarValueBackgroundColor = _this$props3.progressBarValueBackgroundColor;\n      return React.createElement(View, {\n        pointerEvents: \"box-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        }\n      }, React.createElement(Animated.ScrollView, {\n        ref: function ref(scrollView) {\n          _this3.animatedScrollView = scrollView;\n        },\n        scrollEnabled: scrollEnabled,\n        style: {\n          width: vertical ? this.state.width : this.state.width + dividerWidth,\n          height: this.state.height,\n          backgroundColor: backgroundColor\n        },\n        horizontal: !vertical,\n        pagingEnabled: true,\n        scrollEventThrottle: 1,\n        onScroll: Animated.event([{\n          nativeEvent: vertical ? {\n            contentOffset: {\n              y: animatedValue\n            }\n          } : {\n            contentOffset: {\n              x: animatedValue\n            }\n          }\n        }], {\n          useNativeDriver: true\n        }),\n        showsVerticalScrollIndicator: showsVerticalScrollIndicator,\n        showsHorizontalScrollIndicator: showsHorizontalScrollIndicator,\n        onMomentumScrollEnd: function onMomentumScrollEnd(e) {\n          return _this3.onScrollEnd(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        }\n      }, React.Children.map(children, function (child, i) {\n        var dividerBackgroundColor = i !== children.length - 1 && children.length > 0 ? dividerColor : 'transparent';\n        return React.createElement(View, {\n          key: i,\n          style: [styles.pageOuterContainer, {\n            zIndex: -i\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          }\n        }, React.createElement(ParallaxSwiperPage, {\n          index: i,\n          setScrollViewSize: _this3.setScrollViewSize,\n          pageWidth: _this3.state.width,\n          pageHeight: _this3.state.height,\n          dividerWidth: dividerWidth,\n          vertical: vertical,\n          animatedValue: animatedValue,\n          speed: speed,\n          BackgroundComponent: child.props.BackgroundComponent,\n          ForegroundComponent: child.props.ForegroundComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          }\n        }), !vertical && React.createElement(View, {\n          style: {\n            width: dividerWidth,\n            height: _this3.state.height,\n            backgroundColor: dividerBackgroundColor\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          }\n        }));\n      })), showProgressBar && React.createElement(View, {\n        style: {\n          width: vertical ? progressBarThickness : this.state.width,\n          height: vertical ? this.state.height : progressBarThickness,\n          top: vertical ? -this.state.height : -progressBarThickness,\n          backgroundColor: progressBarBackgroundColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.progressBar, {\n          backgroundColor: progressBarValueBackgroundColor,\n          transform: [{\n            translateX: vertical ? 0 : animatedValue.interpolate({\n              inputRange: [0, (this.state.width + dividerWidth) * (children.length - 1)],\n              outputRange: [-this.state.width, 0],\n              extrapolate: 'clamp'\n            })\n          }, {\n            translateY: vertical ? animatedValue.interpolate({\n              inputRange: [0, this.state.height * (children.length - 1)],\n              outputRange: [-this.state.height, 0],\n              extrapolate: 'clamp'\n            }) : 0\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        }\n      })));\n    }\n  }]);\n\n  return ParallaxSwiper;\n}(Component);\n\nvar styles = StyleSheet.create({\n  pageOuterContainer: {\n    flexDirection: 'row'\n  },\n  progressBar: _objectSpread({}, StyleSheet.absoluteFillObject)\n});\nParallaxSwiper.propTypes = {\n  backgroundColor: PropTypes.string,\n  dividerColor: PropTypes.string,\n  dividerWidth: PropTypes.number,\n  speed: function speed(props, propName, componentName) {\n    if (props[propName] < 0 || props[propName] > 1) {\n      return new Error(\"Invalid 'speed' prop for \" + componentName + \". Number should be between 0 and 1.\");\n    }\n  },\n  showsHorizontalScrollIndicator: PropTypes.bool,\n  onMomentumScrollEnd: PropTypes.func,\n  children: PropTypes.arrayOf(function (propValue, key, componentName) {\n    var childComponentName = propValue[key].type.displayName;\n\n    if (!/ParallaxSwiperPage/.test(childComponentName)) {\n      return new Error(\"Invalid component '\" + childComponentName + \"' supplied to \" + componentName + \". Use 'ParallaxSwiperPage' instead.\");\n    }\n  }),\n  vertical: PropTypes.bool,\n  showsVerticalScrollIndicator: PropTypes.bool,\n  animatedValue: PropTypes.instanceOf(Animated.Value),\n  scrollEnabled: PropTypes.bool,\n  scrollToIndex: PropTypes.number,\n  showProgressBar: PropTypes.bool,\n  progressBarThickness: PropTypes.number,\n  progressBarBackgroundColor: PropTypes.string,\n  progressBarValueBackgroundColor: PropTypes.string\n};\nParallaxSwiper.defaultProps = {\n  backgroundColor: 'black',\n  dividerColor: 'black',\n  dividerWidth: 8,\n  speed: 0.25,\n  showsHorizontalScrollIndicator: false,\n  vertical: false,\n  showsVerticalScrollIndicator: false,\n  animatedValue: new Animated.Value(0),\n  onMomentumScrollEnd: function onMomentumScrollEnd() {\n    return null;\n  },\n  scrollToIndex: 0,\n  scrollEnabled: true,\n  showProgressBar: false,\n  progressBarThickness: 4,\n  progressBarBackgroundColor: 'rgba(255,255,255,0.25)',\n  progressBarValueBackgroundColor: 'white'\n};\nexport default ParallaxSwiper;","map":{"version":3,"sources":["/Users/kharl/pawSpace/node_modules/react-native-parallax-swiper/src/ParallaxSwiper.js"],"names":["React","Component","PropTypes","ParallaxSwiperPage","ParallaxSwiperPagePropTypes","Dimensions","get","deviceWidth","width","deviceHeight","height","ParallaxSwiper","state","setScrollViewSize","setState","animatedScrollViewHasScrolled","pageIndex","scrollToIndex","props","setTimeout","nextProps","e","vertical","onMomentumScrollEnd","contentOffset","nativeEvent","y","x","viewSize","Math","abs","toFixed","index","animated","dividerWidth","animatedValue","pageWidth","pageHeight","scrollOffset","setValue","animatedScrollView","_component","scrollTo","children","speed","backgroundColor","dividerColor","showsVerticalScrollIndicator","showsHorizontalScrollIndicator","scrollEnabled","showProgressBar","progressBarThickness","progressBarBackgroundColor","progressBarValueBackgroundColor","scrollView","Animated","event","useNativeDriver","onScrollEnd","Children","map","child","i","dividerBackgroundColor","length","styles","pageOuterContainer","zIndex","BackgroundComponent","ForegroundComponent","top","progressBar","transform","translateX","interpolate","inputRange","outputRange","extrapolate","translateY","StyleSheet","create","flexDirection","absoluteFillObject","propTypes","string","number","propName","componentName","Error","bool","func","arrayOf","propValue","key","childComponentName","type","displayName","test","instanceOf","Value","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { View, Animated, StyleSheet, Dimensions } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport ParallaxSwiperPage, {\n  ParallaxSwiperPagePropTypes,\n} from './ParallaxSwiperPage';\n\nconst { width: deviceWidth, height: deviceHeight } = Dimensions.get('window');\n\nclass ParallaxSwiper extends Component {\n  state = {\n    width: deviceWidth,\n    height: deviceHeight,\n  };\n\n  componentDidMount() {\n    const { scrollToIndex } = this.props;\n\n    if (scrollToIndex) {\n      setTimeout(() => {\n        this.scrollToIndex(scrollToIndex, false);\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.scrollToIndex(nextProps.scrollToIndex);\n  }\n\n  onScrollEnd(e) {\n    const { vertical, onMomentumScrollEnd } = this.props;\n    const contentOffset = vertical\n      ? e.nativeEvent.contentOffset.y\n      : e.nativeEvent.contentOffset.x;\n    const viewSize = vertical ? this.state.height : this.state.width;\n\n    // Divide content offset by size of the view to see which page is visible\n    this.pageIndex = Math.abs((contentOffset / viewSize).toFixed()) || 0;\n    onMomentumScrollEnd(this.pageIndex);\n  }\n\n  setScrollViewSize = (width, height) => {\n    this.setState({ width, height });\n  };\n\n  scrollToIndex(index, animated = true) {\n    const { vertical, dividerWidth, animatedValue } = this.props;\n    const pageWidth = this.state.width + dividerWidth;\n    const pageHeight = this.state.height;\n    const scrollOffset = vertical ? index * pageHeight : index * pageWidth;\n\n    if (!this.animatedScrollViewHasScrolled) {\n      animatedValue.setValue(scrollOffset);\n      this.animatedScrollViewHasScrolled = true;\n    }\n\n    this.animatedScrollView._component.scrollTo({\n      x: vertical ? 0 : scrollOffset,\n      y: vertical ? scrollOffset : 0,\n      animated,\n    });\n  }\n\n  animatedScrollViewHasScrolled = false;\n  pageIndex = 0;\n\n  render() {\n    const {\n      children,\n      speed,\n      backgroundColor,\n      dividerColor,\n      dividerWidth,\n      showsVerticalScrollIndicator,\n      showsHorizontalScrollIndicator,\n      vertical,\n      animatedValue,\n      scrollEnabled,\n      showProgressBar,\n      progressBarThickness,\n      progressBarBackgroundColor,\n      progressBarValueBackgroundColor,\n    } = this.props;\n\n    return (\n      <View pointerEvents=\"box-none\">\n        <Animated.ScrollView\n          ref={(scrollView) => {\n            this.animatedScrollView = scrollView;\n          }}\n          scrollEnabled={scrollEnabled}\n          style={{\n            width: vertical\n              ? this.state.width\n              : this.state.width + dividerWidth,\n            height: this.state.height,\n            backgroundColor,\n          }}\n          horizontal={!vertical}\n          pagingEnabled\n          scrollEventThrottle={1}\n          onScroll={Animated.event(\n            [\n              {\n                nativeEvent: vertical\n                  ? { contentOffset: { y: animatedValue } }\n                  : { contentOffset: { x: animatedValue } },\n              },\n            ],\n            { useNativeDriver: true },\n          )}\n          showsVerticalScrollIndicator={showsVerticalScrollIndicator}\n          showsHorizontalScrollIndicator={showsHorizontalScrollIndicator}\n          onMomentumScrollEnd={e => this.onScrollEnd(e)}\n        >\n          {React.Children.map(children, (child, i) => {\n            const dividerBackgroundColor =\n              i !== children.length - 1 && children.length > 0\n                ? dividerColor\n                : 'transparent';\n\n            return (\n              <View key={i} style={[styles.pageOuterContainer, { zIndex: -i }]}>\n                <ParallaxSwiperPage\n                  index={i}\n                  setScrollViewSize={this.setScrollViewSize}\n                  pageWidth={this.state.width}\n                  pageHeight={this.state.height}\n                  dividerWidth={dividerWidth}\n                  vertical={vertical}\n                  animatedValue={animatedValue}\n                  speed={speed}\n                  BackgroundComponent={child.props.BackgroundComponent}\n                  ForegroundComponent={child.props.ForegroundComponent}\n                />\n                {!vertical && (\n                  <View\n                    style={{\n                      width: dividerWidth,\n                      height: this.state.height,\n                      backgroundColor: dividerBackgroundColor,\n                    }}\n                  />\n                )}\n              </View>\n            );\n          })}\n        </Animated.ScrollView>\n        {showProgressBar && (\n          <View\n            style={{\n              width: vertical ? progressBarThickness : this.state.width,\n              height: vertical ? this.state.height : progressBarThickness,\n              top: vertical ? -this.state.height : -progressBarThickness,\n              backgroundColor: progressBarBackgroundColor,\n            }}\n          >\n            <Animated.View\n              style={[\n                styles.progressBar,\n                {\n                  backgroundColor: progressBarValueBackgroundColor,\n                  transform: [\n                    {\n                      translateX: vertical\n                        ? 0\n                        : animatedValue.interpolate({\n                          inputRange: [\n                            0,\n                            (this.state.width + dividerWidth) *\n                                (children.length - 1),\n                          ],\n                          outputRange: [-this.state.width, 0],\n                          extrapolate: 'clamp',\n                        }),\n                    },\n                    {\n                      translateY: vertical\n                        ? animatedValue.interpolate({\n                          inputRange: [\n                            0,\n                            this.state.height * (children.length - 1),\n                          ],\n                          outputRange: [-this.state.height, 0],\n                          extrapolate: 'clamp',\n                        })\n                        : 0,\n                    },\n                  ],\n                },\n              ]}\n            />\n          </View>\n        )}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pageOuterContainer: {\n    flexDirection: 'row',\n  },\n  progressBar: {\n    ...StyleSheet.absoluteFillObject,\n  },\n});\n\nParallaxSwiper.propTypes = {\n  backgroundColor: PropTypes.string,\n  dividerColor: PropTypes.string,\n  dividerWidth: PropTypes.number,\n  speed(props, propName, componentName) {\n    if (props[propName] < 0 || props[propName] > 1) {\n      return new Error(\n        `Invalid 'speed' prop for ${componentName}. Number should be between 0 and 1.`,\n      );\n    }\n  },\n  showsHorizontalScrollIndicator: PropTypes.bool,\n  onMomentumScrollEnd: PropTypes.func,\n  children: PropTypes.arrayOf((propValue, key, componentName) => {\n    const childComponentName = propValue[key].type.displayName;\n    if (!/ParallaxSwiperPage/.test(childComponentName)) {\n      return new Error(\n        `Invalid component '${childComponentName}' supplied to ${componentName}. Use 'ParallaxSwiperPage' instead.`,\n      );\n    }\n  }),\n  vertical: PropTypes.bool,\n  showsVerticalScrollIndicator: PropTypes.bool,\n  animatedValue: PropTypes.instanceOf(Animated.Value),\n  scrollEnabled: PropTypes.bool,\n  scrollToIndex: PropTypes.number,\n  showProgressBar: PropTypes.bool,\n  progressBarThickness: PropTypes.number,\n  progressBarBackgroundColor: PropTypes.string,\n  progressBarValueBackgroundColor: PropTypes.string,\n};\n\nParallaxSwiper.defaultProps = {\n  backgroundColor: 'black',\n  dividerColor: 'black',\n  dividerWidth: 8,\n  speed: 0.25,\n  showsHorizontalScrollIndicator: false,\n  vertical: false,\n  showsVerticalScrollIndicator: false,\n  animatedValue: new Animated.Value(0),\n  onMomentumScrollEnd: () => null,\n  scrollToIndex: 0,\n  scrollEnabled: true,\n  showProgressBar: false,\n  progressBarThickness: 4,\n  progressBarBackgroundColor: 'rgba(255,255,255,0.25)',\n  progressBarValueBackgroundColor: 'white',\n};\n\nexport default ParallaxSwiper;\n"]},"metadata":{},"sourceType":"module"}